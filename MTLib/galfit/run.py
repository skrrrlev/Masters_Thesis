

from subprocess import run
from shutil import move
from os import listdir, remove
from os.path import isfile
from re import search
from astropy.io import fits

class GalfitError(Exception):
    '''Raised when galfit didn't complete'''

def run_galfit(input_file:str, log_file:str=''):
    
    if not isfile(input_file):
        raise ValueError(f'The variable <input_file>={input_file} is not a file.')
    
    run(['galfit',input_file])
    if not isfile('fit.log'):
        raise GalfitError('Galfit could not converge.')
    if log_file:
        move('fit.log',log_file)
    else:
        remove('fit.log')
    restart_file = [file for file in listdir('.') if bool(search(r"galfit\.[0-9]+", file))]
    for file in restart_file:
        remove(file)


def create_input_file(filename:str, parameters:"dict[str,list[str]]", objects: "list[dict[str,list[str]]]"):
    '''
    Create an input file for galfit

    <filename>:     filename (+path) of the input file generated by this method.
    <parameters>:   dictionary of parameters describing the fitting. See the "IMAGE PARAMETERS" section of the galfit readme example input file.

        Here's the example input file from the galfit readme paper created by this method:

        parameters = {
            'A': ['gal.fits'],
            'B': ['imgblock.fits'],
            'D': ['psf.fits'],
            'H': ['1','93','1','93'],
            'I': ['100','100'],
            'J': ['26.563'],
            'K': ['0.038', '0.038'],
        } 

        The resulting parameters C, E, F, G, 0 and P are defaulting to none, 1, none, none, both and 0, respectively.

        Allowed keys of the parameters-dictionary, are only those mentioned above [A-K, 0, P].

        floats/integers can be passed, but strings are prefered.

    <objects>:      list of dictionaries describing the objects to fit to the input file.

        Use the items as described in the galfit readme paper. Here's an example of the sersic profile in the galfit readme paper:

        object = {
            '0': ['sersic'],
            '1': ['50','50','1','1'],
            '3': ['20.0890','1'],
            '4': ['5','1160','1'],
            '5': ['4.2490','1'],
            '9': ['0.7570','1'],
            '10': ['-60.3690','1'],
            'F1': ['0.0001','0.0000','1','1'],
            'F2': ['0.0001','0.0000','1','1'],
            'Z': ['0']
        } 

        Any key is accepted from an object dictionary. Be careful to only include ones that are meaningful to galfit. This is because there's no default behaviour of these parameters if they're not included.

        floats/integers can be passed, but strings are prefered.
    '''
    #with fits.open(parameters['A'][0]) as hdul:
        #shape = hdul[0].shape
    
    for key in parameters:
        for i in range(len(parameters[key])):
            if not isinstance(parameters[key][i],str):
                parameters[key][i] = str(parameters[key][i])
                print(f'Converted: {parameters[key][i]}')

    if not 'H' in parameters or not 'I' in parameters:
        file_to_fit = parameters['A'][0].replace("[0]","")
        with fits.open(file_to_fit) as hdul:
            shape = hdul[0].data.shape
    
    input_file_as_list = [
        f'# {"IMAGE PARAMETERS":^60}',
        f" A) {' '.join(parameters['A']):60} # Input data image (FITS file)",
        f" B) {' '.join(parameters['B']):60} # Output data image block",
        f" C) {' '.join(parameters['C']) if 'C' in parameters else 'none':60} # Sigma image name (made from data if blank or 'none')",
        f" D) {' '.join(parameters['D']):60} # Input PSF image and (optional) diffusion kernel",
        f" E) {' '.join(parameters['E']) if 'E' in parameters else '1':60} # PSF fine sampling factor relative to data",
        f" F) {' '.join(parameters['F']) if 'F' in parameters else 'none':60} # Bad pixel mask (FITS image or ASCII coord list)",
        f" G) {' '.join(parameters['G']) if 'G' in parameters else 'none':60} # File with parameter constraints (ASCII file)",
        f" H) {' '.join(parameters['H']) if 'H' in parameters else f'1 {shape[1]+1} 1 {shape[0]+1}':60} # Image region to fit (xmin xmax ymin ymax)",
        f" I) {' '.join(parameters['I']) if 'I' in parameters else f'{shape[1]} {shape[0]}':60} # Size of the convolution box (x y)",
        f" J) {' '.join(parameters['J']):60} # Magnitude photometric zeropoint",
        f" K) {' '.join(parameters['K']):60} # Plate scale (dx dy) [arcsec per pixel]",
        f" O) {' '.join(parameters['0']) if '0' in parameters else 'both':60} # Display type (regular, curses, both)",
        f" P) {' '.join(parameters['P']) if 'P' in parameters else '0':60}",
    ]

    for object in objects:
        for key in object:
            for i in range(len(object[key])):
                if not isinstance(object[key][i],str):
                    object[key][i] = str(object[key][i])
                    print(f'Converted: {object[key][i]}')

    input_file_as_list.append(f'# {"OBJECTS":^60}')

    for i, object in enumerate(objects):
        input_file_as_list.append(f'# Object {i+1}')
        for key in object:
            input_file_as_list.append(f"{key:>2}) {' '.join(object[key]):60} #")

    with open(filename,'w') as f:
        f.write("\n".join(input_file_as_list))


if __name__ == '__main__':
    parameters = {
        'A': ['gal.fits'],
        'B': ['imgblock.fits'],
        'D': ['psf.fits'],
        'H': ['1','93','1','93'],
        'I': ['100','100'],
        'J': ['26.563'],
        'K': ['0.038', '0.038'],
    } 

    object = {
        '0': ['sersic'],
        '1': ['50','50','1','1'],
        '3': ['20.0890','1'],
        '4': ['5','1160','1'],
        '5': ['4.2490','1'],
        '9': ['0.7570','1'],
        '10': ['-60.3690','1'],
        'F1': ['0.0001','0.0000','1','1'],
        'F2': ['0.0001','0.0000','1','1'],
        'Z': ['0']
    } 

    create_input_file('test.input',parameters,[object])